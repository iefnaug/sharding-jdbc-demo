#打印sql
#spring.shardingsphere.props.sql-show=true

##################分表配置

#配置数据源名称
spring.shardingsphere.datasource.names=server-user,server-order0,server-order1
#配置数据源
spring.shardingsphere.datasource.server-user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-user.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.server-user.jdbc-url=jdbc:mysql://172.16.130.11:3309/db_user?characterEncoding=UTF-8&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.server-user.username=root
spring.shardingsphere.datasource.server-user.password=root

spring.shardingsphere.datasource.server-order0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.server-order0.jdbc-url=jdbc:mysql://172.16.130.11:3310/db_order?characterEncoding=UTF-8&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.server-order0.username=root
spring.shardingsphere.datasource.server-order0.password=root

spring.shardingsphere.datasource.server-order1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.server-order1.jdbc-url=jdbc:mysql://172.16.130.11:3311/db_order?characterEncoding=UTF-8&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.server-order1.username=root
spring.shardingsphere.datasource.server-order1.password=root


# 标准分片表配置
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=server-user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order$->{0..1}.t_order$->{0..1}

## 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一

## 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=alg_inline_userid

## 分表策略，同分库策略
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_no
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash

#spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
#
## 自动分片表配置
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
#
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm-name= # 自动分片算法名称


#
## 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=id_generator
#
#spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
#
#spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表


#
#spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
#spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
#spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
#spring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称


### 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression=server-order$->{user_id % 2}

spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type=MOD
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count=2

spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.type=HASH_MOD
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.props.sharding-count=2

### 分布式序列算法配置
spring.shardingsphere.rules.sharding.key-generators.id_generator.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.id_generator.props.max-vibration-offset=1
